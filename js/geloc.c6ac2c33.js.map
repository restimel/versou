{"version":3,"sources":["webpack:///./src/views/GeolocSettings.vue","webpack:///./src/views/GeolocSettings.vue?a113","webpack:///./src/views/GeolocSettings.vue?83d7"],"names":["class","values","fields","onChange","textMustBeInteger","refreshTimeComment","geolocSettings","mapSettings","notificationSettings","type","id","label","title","unit","value","Math","round","refreshTime","min","comment","this","highPrecision","layer","options","Array","from","layerId","text","iconPosition","iconId","icon","hardware","vibrate","fieldId","time","Number","isFinite","has","components","Back","Form","render"],"mappings":"yIACSA,MAAM,Y,EAEP,eAA6B,UAAzB,wBAAoB,G,wGAF5B,eAOM,MAPN,EAOM,CANF,eAAO,GACP,EACA,eAGE,GAFGC,OAAQ,EAAAC,OACR,QAAO,EAAAC,U,uHCWpB,MAAMC,EAAoB,mDAQ1B,IAAqB,EAArB,cAA4C,OAA5C,c,oBACY,KAAAC,mBAAqB,GAC7B,aACI,MAAMC,EAAiB,OAAMA,eACvBC,EAAc,OAAMA,YACpBC,EAAuB,OAAMA,qBACnC,MAAO,CAAC,CACJC,KAAM,aACP,CACCC,GAAI,cACJC,MAAO,2CACPC,MAAO,6CACPH,KAAM,SACNI,KAAM,WACNC,MAAOC,KAAKC,MAAMV,EAAeW,YAAc,KAC/CC,IAAK,EACLC,QAASC,KAAKf,oBACf,CACCK,GAAI,gBACJC,MAAO,yCACPC,MAAO,qFACPO,QAASb,EAAee,cAAgB,oDAAsD,GAC9FZ,KAAM,UACNK,MAAOR,EAAee,eACvB,CACCZ,KAAM,aACP,CACCC,GAAI,QACJC,MAAO,gBACPF,KAAM,SACNK,MAAOP,EAAYe,MACnBC,QAASC,MAAMC,KAAK,OAAQ,EAAEC,MAAa,CACvCC,KAAMD,EACNZ,MAAOY,MAEZ,CACChB,GAAI,eACJC,MAAO,6BACPF,KAAM,SACNK,MAAOP,EAAYqB,aACnBL,QAASC,MAAMC,KAAK,OAAO,EAAEI,EAAQC,MAAU,CAC3CH,KAAMG,EAAKnB,MACXG,MAAOe,MAEZ,CACClB,MAAO,qBACPF,KAAM,QACNK,MAAO,eAAWP,EAAYqB,eAC/B,CACCnB,KAAM,aACP,CACCC,GAAI,uBACJC,MAAO,sCACPF,KAAM,UACNK,MAAON,EAAqBuB,UAC7B,CACCrB,GAAI,kBACJC,MAAO,8DACPF,KAAM,UACNK,MAAON,EAAqBwB,UAI5B,SAASC,EAAiBnB,GAC9B,OAAOmB,GACH,IAAK,cAAe,CAChB,MAAMC,EAAgB,KAARpB,EACVqB,OAAOC,SAASF,IAASA,EAAO,GAChC,OAAM5B,eAAeW,YAAciB,EACnCd,KAAKf,mBAAqB,IAE1Be,KAAKf,mBAAqBD,EAE9B,MAEJ,IAAK,gBACD,OAAME,eAAee,gBAAkBP,EACvC,MACJ,IAAK,QACG,OAAOuB,IAAIvB,KACX,OAAMP,YAAYe,MAAQR,GAE9B,MACJ,IAAK,eACG,OAAMuB,IAAIvB,KACV,OAAMP,YAAYqB,aAAed,GAErC,MACJ,IAAK,uBACD,OAAMN,qBAAqBuB,WAAajB,EACpCA,GACA,iBAEJ,MACJ,IAAK,kBACD,OAAMN,qBAAqBwB,UAAYlB,EACvC,MACJ,QACI,eAAa,aAAamB,qBAA4B,CAACxB,KAAM,aAlGxD,EAAc,gBANlC,eAAQ,CACL6B,WAAY,CACRC,OAAA,KACAC,OAAA,SAGa,WCtBrB,EAAOC,OAASA,EAED","file":"js/geloc.c6ac2c33.js","sourcesContent":["<template>\n    <div class=\"settings\">\n        <Back/>\n        <h1>Geolocation settings</h1>\n        <Form\n            :values=\"fields\"\n            @input=\"onChange\"\n        />\n    </div>\n</template>\n<script lang=\"ts\">\nimport { Options, Vue } from 'vue-class-component';\nimport store from '@/Store';\nimport Back from '@/components/Back.vue';\nimport Form from '@/components/Form.vue';\nimport {\n    FieldSelectOption,\n    FormItem,\n    LayerId,\n} from '@/Types';\nimport notification, { messagePermission } from '@/Notification';\nimport {\n    layers,\n    icons,\n    getUrlIcon,\n} from '@/tools/mapInfo';\n\nconst textMustBeInteger = 'Cette valeur doit être un nombre entier positif.';\n\n@Options({\n    components: {\n        Back,\n        Form,\n    },\n})\nexport default class GeolocSettings extends Vue {\n    private refreshTimeComment = '';\n    get fields(): Partial<FormItem>[] {\n        const geolocSettings = store.geolocSettings;\n        const mapSettings = store.mapSettings;\n        const notificationSettings = store.notificationSettings;\n        return [{\n            type: 'emptyLine',\n        }, {\n            id: 'refreshTime',\n            label: 'Délai de rafraichissement de la position',\n            title: 'Temps entre 2 enregistrements de positions',\n            type: 'number',\n            unit: 'secondes',\n            value: Math.round(geolocSettings.refreshTime / 1000),\n            min: 1,\n            comment: this.refreshTimeComment,\n        }, {\n            id: 'highPrecision',\n            label: 'Utiliser une plus grande précision GPS',\n            title: 'Cette fonctionnalité permet une meilleure précision mais consomme plus de batterie',\n            comment: geolocSettings.highPrecision ? '⚠ Cette fonctionnalité consomme plus de batterie!' : '',\n            type: 'boolean',\n            value: geolocSettings.highPrecision,\n        }, {\n            type: 'emptyLine',\n        }, {\n            id: 'layer',\n            label: 'Fond de carte',\n            type: 'select',\n            value: mapSettings.layer,\n            options: Array.from(layers, ([layerId]) => ({\n                text: layerId,\n                value: layerId,\n            } as FieldSelectOption)),\n        }, {\n            id: 'iconPosition',\n            label: 'Marqueur de votre position',\n            type: 'select',\n            value: mapSettings.iconPosition,\n            options: Array.from(icons, ([iconId, icon]) => ({\n                text: icon.label,\n                value: iconId,\n            } as FieldSelectOption)),\n        }, {\n            label: 'Aperçu du marqueur',\n            type: 'image',\n            value: getUrlIcon(mapSettings.iconPosition),\n        }, {\n            type: 'emptyLine',\n        }, {\n            id: 'hardwareNotification',\n            label: 'Accepter les notifications matériel',\n            type: 'boolean',\n            value: notificationSettings.hardware,\n        }, {\n            id: 'hardwareVibrate',\n            label: 'Émettre des vibrations pour prévenir de messages importants',\n            type: 'boolean',\n            value: notificationSettings.vibrate,\n        }];\n    }\n\n    private onChange(fieldId: string, value: string) {\n        switch(fieldId) {\n            case 'refreshTime': {\n                const time = +value * 1000;\n                if (Number.isFinite(time) && time > 0) {\n                    store.geolocSettings.refreshTime = time;\n                    this.refreshTimeComment = '';\n                } else {\n                    this.refreshTimeComment = textMustBeInteger;\n                }\n                break;\n            }\n            case 'highPrecision':\n                store.geolocSettings.highPrecision = !!value;\n                break;\n            case 'layer':\n                if (layers.has(value as LayerId)) {\n                    store.mapSettings.layer = value as LayerId;\n                }\n                break;\n            case 'iconPosition':\n                if (icons.has(value)) {\n                    store.mapSettings.iconPosition = value;\n                }\n                break;\n            case 'hardwareNotification':\n                store.notificationSettings.hardware = !!value;\n                if (value) {\n                    messagePermission();\n                }\n                break;\n            case 'hardwareVibrate':\n                store.notificationSettings.vibrate = !!value;\n                break;\n            default:\n                notification(`field id \"${fieldId}\" does not exists`, {type: 'error'});\n        }\n    }\n}\n</script>\n","\nimport { Options, Vue } from 'vue-class-component';\nimport store from '@/Store';\nimport Back from '@/components/Back.vue';\nimport Form from '@/components/Form.vue';\nimport {\n    FieldSelectOption,\n    FormItem,\n    LayerId,\n} from '@/Types';\nimport notification, { messagePermission } from '@/Notification';\nimport {\n    layers,\n    icons,\n    getUrlIcon,\n} from '@/tools/mapInfo';\n\nconst textMustBeInteger = 'Cette valeur doit être un nombre entier positif.';\n\n@Options({\n    components: {\n        Back,\n        Form,\n    },\n})\nexport default class GeolocSettings extends Vue {\n    private refreshTimeComment = '';\n    get fields(): Partial<FormItem>[] {\n        const geolocSettings = store.geolocSettings;\n        const mapSettings = store.mapSettings;\n        const notificationSettings = store.notificationSettings;\n        return [{\n            type: 'emptyLine',\n        }, {\n            id: 'refreshTime',\n            label: 'Délai de rafraichissement de la position',\n            title: 'Temps entre 2 enregistrements de positions',\n            type: 'number',\n            unit: 'secondes',\n            value: Math.round(geolocSettings.refreshTime / 1000),\n            min: 1,\n            comment: this.refreshTimeComment,\n        }, {\n            id: 'highPrecision',\n            label: 'Utiliser une plus grande précision GPS',\n            title: 'Cette fonctionnalité permet une meilleure précision mais consomme plus de batterie',\n            comment: geolocSettings.highPrecision ? '⚠ Cette fonctionnalité consomme plus de batterie!' : '',\n            type: 'boolean',\n            value: geolocSettings.highPrecision,\n        }, {\n            type: 'emptyLine',\n        }, {\n            id: 'layer',\n            label: 'Fond de carte',\n            type: 'select',\n            value: mapSettings.layer,\n            options: Array.from(layers, ([layerId]) => ({\n                text: layerId,\n                value: layerId,\n            } as FieldSelectOption)),\n        }, {\n            id: 'iconPosition',\n            label: 'Marqueur de votre position',\n            type: 'select',\n            value: mapSettings.iconPosition,\n            options: Array.from(icons, ([iconId, icon]) => ({\n                text: icon.label,\n                value: iconId,\n            } as FieldSelectOption)),\n        }, {\n            label: 'Aperçu du marqueur',\n            type: 'image',\n            value: getUrlIcon(mapSettings.iconPosition),\n        }, {\n            type: 'emptyLine',\n        }, {\n            id: 'hardwareNotification',\n            label: 'Accepter les notifications matériel',\n            type: 'boolean',\n            value: notificationSettings.hardware,\n        }, {\n            id: 'hardwareVibrate',\n            label: 'Émettre des vibrations pour prévenir de messages importants',\n            type: 'boolean',\n            value: notificationSettings.vibrate,\n        }];\n    }\n\n    private onChange(fieldId: string, value: string) {\n        switch(fieldId) {\n            case 'refreshTime': {\n                const time = +value * 1000;\n                if (Number.isFinite(time) && time > 0) {\n                    store.geolocSettings.refreshTime = time;\n                    this.refreshTimeComment = '';\n                } else {\n                    this.refreshTimeComment = textMustBeInteger;\n                }\n                break;\n            }\n            case 'highPrecision':\n                store.geolocSettings.highPrecision = !!value;\n                break;\n            case 'layer':\n                if (layers.has(value as LayerId)) {\n                    store.mapSettings.layer = value as LayerId;\n                }\n                break;\n            case 'iconPosition':\n                if (icons.has(value)) {\n                    store.mapSettings.iconPosition = value;\n                }\n                break;\n            case 'hardwareNotification':\n                store.notificationSettings.hardware = !!value;\n                if (value) {\n                    messagePermission();\n                }\n                break;\n            case 'hardwareVibrate':\n                store.notificationSettings.vibrate = !!value;\n                break;\n            default:\n                notification(`field id \"${fieldId}\" does not exists`, {type: 'error'});\n        }\n    }\n}\n","import { render } from \"./GeolocSettings.vue?vue&type=template&id=7d459de7\"\nimport script from \"./GeolocSettings.vue?vue&type=script&lang=ts\"\nexport * from \"./GeolocSettings.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}